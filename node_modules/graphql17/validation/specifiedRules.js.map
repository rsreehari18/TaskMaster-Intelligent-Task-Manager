{"version":3,"file":"specifiedRules.js","sourceRoot":"","sources":["../../src/validation/specifiedRules.ts"],"names":[],"mappings":";;;AAAA,+DAA+D;AAC/D,+FAAyF;AACzF,2EAA2E;AAC3E,2GAAqG;AACrG,2EAA2E;AAC3E,uHAAiH;AACjH,yCAAyC;AACzC,uFAAiF;AACjF,4EAA4E;AAC5E,mFAA6E;AAC7E,+CAA+C;AAC/C,+FAAyF;AACzF,iCAAiC;AACjC,iFAG2C;AAC3C,yCAAyC;AACzC,2EAAqE;AACrE,iDAAiD;AACjD,iFAA2E;AAC3E,2CAA2C;AAC3C,mFAA6E;AAC7E,iDAAiD;AACjD,yEAAmE;AACnE,2CAA2C;AAC3C,yFAAmF;AACnF,gCAAgC;AAChC,qFAA+E;AAC/E,qBAAqB;AACrB,uFAAiF;AACjF,iDAAiD;AACjD,6EAAuE;AACvE,4CAA4C;AAC5C,qFAA+E;AAC/E,yCAAyC;AACzC,+EAAyE;AACzE,qCAAqC;AACrC,+EAAyE;AACzE,0CAA0C;AAC1C,qGAA+F;AAC/F,8CAA8C;AAC9C,2FAAqF;AACrF,yFAAmF;AACnF,uCAAuC;AACvC,+FAGkD;AAClD,wCAAwC;AACxC,mEAA6D;AAC7D,uDAAuD;AACvD,6FAAuF;AACvF,4DAA4D;AAC5D,iGAA2F;AAC3F,uGAAiG;AACjG,sCAAsC;AACtC,mFAA6E;AAC7E,qFAA+E;AAC/E,qDAAqD;AACrD,mGAA6F;AAC7F,qFAA+E;AAC/E,iGAA2F;AAC3F,2CAA2C;AAC3C,mFAA6E;AAC7E,gDAAgD;AAChD,uFAAiF;AACjF,4CAA4C;AAC5C,qFAA+E;AAC/E,qFAA+E;AAC/E,2EAAqE;AACrE,sCAAsC;AACtC,mFAA6E;AAC7E,yCAAyC;AACzC,mFAA6E;AAC7E,4CAA4C;AAC5C,yFAAmF;AACnF,kDAAkD;AAClD,iGAA2F;AAG3F;;;GAGG;AACU,QAAA,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,wDAAyB,CAAC,CAAC,CAAC;AAE3E;;;;;GAKG;AACU,QAAA,cAAc,GAAkC,MAAM,CAAC,MAAM,CAAC;IACzE,wDAAyB;IACzB,oDAAuB;IACvB,sDAAwB;IACxB,0DAA0B;IAC1B,8DAA4B;IAC5B,0CAAkB;IAClB,gEAA6B;IAC7B,0DAA0B;IAC1B,oCAAe;IACf,oDAAuB;IACvB,oDAAuB;IACvB,kDAAsB;IACtB,gDAAqB;IACrB,4DAA2B;IAC3B,8CAAoB;IACpB,oDAAuB;IACvB,sDAAwB;IACxB,gDAAqB;IACrB,4CAAmB;IACnB,oEAA+B;IAC/B,4EAAmC;IACnC,wFAAyC;IACzC,gEAA6B;IAC7B,kEAA8B;IAC9B,kDAAsB;IACtB,oDAAuB;IACvB,oDAAuB;IACvB,gEAA6B;IAC7B,kEAA8B;IAC9B,sEAAgC;IAChC,wDAAyB;IACzB,GAAG,wBAAgB;CACpB,CAAC,CAAC;AAEH;;GAEG;AACU,QAAA,iBAAiB,GAC5B,MAAM,CAAC,MAAM,CAAC;IACZ,sDAAwB;IACxB,sDAAwB;IACxB,4CAAmB;IACnB,sDAAwB;IACxB,kEAA8B;IAC9B,wEAAiC;IACjC,sDAAwB;IACxB,0CAAkB;IAClB,4CAAmB;IACnB,oEAA+B;IAC/B,0DAA0B;IAC1B,8DAAkC;IAClC,oDAAuB;IACvB,wDAAyB;IACzB,4EAAyC;CAC1C,CAAC,CAAC","sourcesContent":["// Spec Section: \"Defer And Stream Directive Labels Are Unique\"\nimport { DeferStreamDirectiveLabelRule } from './rules/DeferStreamDirectiveLabelRule.js';\n// Spec Section: \"Defer And Stream Directives Are Used On Valid Root Field\"\nimport { DeferStreamDirectiveOnRootFieldRule } from './rules/DeferStreamDirectiveOnRootFieldRule.js';\n// Spec Section: \"Defer And Stream Directives Are Used On Valid Operations\"\nimport { DeferStreamDirectiveOnValidOperationsRule } from './rules/DeferStreamDirectiveOnValidOperationsRule.js';\n// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.js';\n// Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.js';\n// Spec Section: \"Fragments on Composite Types\"\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.js';\n// Spec Section: \"Argument Names\"\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.js';\n// Spec Section: \"Directives Are Defined\"\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.js';\n// Spec Section: \"Fragment spread target defined\"\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.js';\n// Spec Section: \"Operation Type Existence\"\nimport { KnownOperationTypesRule } from './rules/KnownOperationTypesRule.js';\n// Spec Section: \"Fragment Spread Type Existence\"\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.js';\n// Spec Section: \"Lone Anonymous Operation\"\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.js';\n// SDL-specific validation rules\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.js';\n// TODO: Spec Section\nimport { MaxIntrospectionDepthRule } from './rules/MaxIntrospectionDepthRule.js';\n// Spec Section: \"Fragments must not form cycles\"\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.js';\n// Spec Section: \"All Variable Used Defined\"\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.js';\n// Spec Section: \"Fragments must be used\"\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.js';\n// Spec Section: \"All Variables Used\"\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.js';\n// Spec Section: \"Field Selection Merging\"\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.js';\n// Spec Section: \"Fragment spread is possible\"\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.js';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.js';\n// Spec Section: \"Argument Optionality\"\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.js';\n// Spec Section: \"Leaf Field Selections\"\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.js';\n// Spec Section: \"Subscriptions with Single Root Field\"\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.js';\n// Spec Section: \"Stream Directives Are Used On List Fields\"\nimport { StreamDirectiveOnListFieldRule } from './rules/StreamDirectiveOnListFieldRule.js';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.js';\n// Spec Section: \"Argument Uniqueness\"\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.js';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.js';\n// Spec Section: \"Directives Are Unique Per Location\"\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.js';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.js';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.js';\n// Spec Section: \"Fragment Name Uniqueness\"\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.js';\n// Spec Section: \"Input Object Field Uniqueness\"\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.js';\n// Spec Section: \"Operation Name Uniqueness\"\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.js';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.js';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.js';\n// Spec Section: \"Variable Uniqueness\"\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.js';\n// Spec Section: \"Value Type Correctness\"\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.js';\n// Spec Section: \"Variables are Input Types\"\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.js';\n// Spec Section: \"All Variable Usages Are Allowed\"\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.js';\nimport type { SDLValidationRule, ValidationRule } from './ValidationContext.js';\n\n/**\n * Technically these aren't part of the spec but they are strongly encouraged\n * validation rules.\n */\nexport const recommendedRules = Object.freeze([MaxIntrospectionDepthRule]);\n\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\nexport const specifiedRules: ReadonlyArray<ValidationRule> = Object.freeze([\n  ExecutableDefinitionsRule,\n  KnownOperationTypesRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  DeferStreamDirectiveOnRootFieldRule,\n  DeferStreamDirectiveOnValidOperationsRule,\n  DeferStreamDirectiveLabelRule,\n  StreamDirectiveOnListFieldRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n  ...recommendedRules,\n]);\n\n/**\n * @internal\n */\nexport const specifiedSDLRules: ReadonlyArray<SDLValidationRule> =\n  Object.freeze([\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueArgumentDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    KnownArgumentNamesOnDirectivesRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n    ProvidedRequiredArgumentsOnDirectivesRule,\n  ]);\n"]}