{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/utilities/index.ts"],"names":[],"mappings":";;;AAAA,yEAAyE;AACzE,uEAAmE;AAA1D,iIAAA,qBAAqB,OAAA;AA2B9B,6CAA6C;AAC7C,2DAAuD;AAA9C,qHAAA,eAAe,OAAA;AAExB,oDAAoD;AACpD,2EAAuE;AAA9D,qIAAA,uBAAuB,OAAA;AAEhC,sDAAsD;AACtD,+DAA2D;AAAlD,yHAAA,iBAAiB,OAAA;AAE1B,sDAAsD;AACtD,yDAAkE;AAAzD,mHAAA,cAAc,OAAA;AAAE,gHAAA,WAAW,OAAA;AAGpC,+EAA+E;AAC/E,qDAAiD;AAAxC,+GAAA,YAAY,OAAA;AAErB,wBAAwB;AACxB,2EAAuE;AAA9D,qIAAA,uBAAuB,OAAA;AAEhC,oDAAoD;AACpD,mDAK0B;AAJxB,6GAAA,WAAW,OAAA;AACX,2GAAA,SAAS,OAAA;AACT,gHAAA,cAAc,OAAA;AACd,0HAAA,wBAAwB,OAAA;AAG1B,oDAAoD;AACpD,mDAA+C;AAAtC,6GAAA,WAAW,OAAA;AAEpB,qEAAqE;AACrE,qDAG2B;AAFzB,8EAA8E;AAC9E,+GAAA,YAAY,OAAA;AAGd,wEAAwE;AACxE,mEAA+D;AAAtD,6HAAA,mBAAmB,OAAA;AAE5B,yDAAyD;AACzD,qDAG2B;AAFzB,mIAAmI;AACnI,+GAAA,YAAY,OAAA;AAGd,uGAAuG;AACvG,6CAA4D;AAAnD,uGAAA,QAAQ,OAAA;AAAE,gHAAA,iBAAiB,OAAA;AAEpC,4DAA4D;AAC5D,6DAAyD;AAAhD,uHAAA,gBAAgB,OAAA;AAEzB,gEAAgE;AAChE,yDAAqD;AAA5C,mHAAA,cAAc,OAAA;AAEvB,6DAK+B;AAJ7B,sEAAsE;AACtE,uHAAA,gBAAgB,OAAA;AAChB,2EAA2E;AAC3E,yHAAA,kBAAkB,OAAA;AAGpB,iEAKiC;AAJ/B,0EAA0E;AAC1E,2HAAA,kBAAkB,OAAA;AAClB,+EAA+E;AAC/E,6HAAA,oBAAoB,OAAA;AAGtB,sCAAsC;AACtC,+CAA2C;AAAlC,yGAAA,SAAS,OAAA;AAElB,8CAA8C;AAC9C,iEAA6D;AAApD,2HAAA,kBAAkB,OAAA;AAE3B,iGAAiG;AACjG,yEAAqE;AAA5D,mIAAA,sBAAsB,OAAA;AAE/B,wBAAwB;AACxB,2DAI8B;AAH5B,iHAAA,WAAW,OAAA;AACX,qHAAA,eAAe,OAAA;AACf,oHAAA,cAAc,OAAA;AAGhB,4DAA4D;AAC5D,+DAOgC;AAN9B,0HAAA,kBAAkB,OAAA;AAClB,2HAAA,mBAAmB,OAAA;AACnB,sHAAA,cAAc,OAAA;AACd,2HAAA,mBAAmB,OAAA;AACnB,4HAAA,oBAAoB,OAAA;AACpB,yHAAA,iBAAiB,OAAA","sourcesContent":["// Produce the GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery } from './getIntrospectionQuery.js';\n\nexport type {\n  IntrospectionOptions,\n  IntrospectionQuery,\n  IntrospectionSchema,\n  IntrospectionType,\n  IntrospectionInputType,\n  IntrospectionOutputType,\n  IntrospectionScalarType,\n  IntrospectionObjectType,\n  IntrospectionInterfaceType,\n  IntrospectionUnionType,\n  IntrospectionEnumType,\n  IntrospectionInputObjectType,\n  IntrospectionTypeRef,\n  IntrospectionInputTypeRef,\n  IntrospectionOutputTypeRef,\n  IntrospectionNamedTypeRef,\n  IntrospectionListTypeRef,\n  IntrospectionNonNullTypeRef,\n  IntrospectionField,\n  IntrospectionInputValue,\n  IntrospectionEnumValue,\n  IntrospectionDirective,\n} from './getIntrospectionQuery.js';\n\n// Gets the target Operation from a Document.\nexport { getOperationAST } from './getOperationAST.js';\n\n// Convert a GraphQLSchema to an IntrospectionQuery.\nexport { introspectionFromSchema } from './introspectionFromSchema.js';\n\n// Build a GraphQLSchema from an introspection result.\nexport { buildClientSchema } from './buildClientSchema.js';\n\n// Build a GraphQLSchema from GraphQL Schema language.\nexport { buildASTSchema, buildSchema } from './buildASTSchema.js';\nexport type { BuildSchemaOptions } from './buildASTSchema.js';\n\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema.js';\n\n// Sort a GraphQLSchema.\nexport { lexicographicSortSchema } from './lexicographicSortSchema.js';\n\n// Print a GraphQLSchema to GraphQL Schema language.\nexport {\n  printSchema,\n  printType,\n  printDirective,\n  printIntrospectionSchema,\n} from './printSchema.js';\n\n// Create a GraphQLType from a GraphQL language AST.\nexport { typeFromAST } from './typeFromAST.js';\n\n// Create a JavaScript value from a GraphQL language AST with a type.\nexport {\n  /** @deprecated use `coerceInputLiteral()` instead - will be removed in v18 */\n  valueFromAST,\n} from './valueFromAST.js';\n\n// Create a JavaScript value from a GraphQL language AST without a type.\nexport { valueFromASTUntyped } from './valueFromASTUntyped.js';\n\n// Create a GraphQL language AST from a JavaScript value.\nexport {\n  /** @deprecated use `valueToLiteral()` instead with care to operate on external values - `astFromValue()` will be removed in v18 */\n  astFromValue,\n} from './astFromValue.js';\n\n// A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\nexport { TypeInfo, visitWithTypeInfo } from './TypeInfo.js';\n\n// Converts a value to a const value by replacing variables.\nexport { replaceVariables } from './replaceVariables.js';\n\n// Create a GraphQL literal (AST) from a JavaScript input value.\nexport { valueToLiteral } from './valueToLiteral.js';\n\nexport {\n  // Coerces a JavaScript value to a GraphQL type, or returns undefined.\n  coerceInputValue,\n  // Coerces a GraphQL literal (AST) to a GraphQL type, or returns undefined.\n  coerceInputLiteral,\n} from './coerceInputValue.js';\n\nexport {\n  // Validate a JavaScript value with a GraphQL type, collecting all errors.\n  validateInputValue,\n  // Validate a GraphQL literal (AST) with a GraphQL type, collecting all errors.\n  validateInputLiteral,\n} from './validateInputValue.js';\n\n// Concatenates multiple AST together.\nexport { concatAST } from './concatAST.js';\n\n// Separates an AST into an AST per Operation.\nexport { separateOperations } from './separateOperations.js';\n\n// Strips characters that are not significant to the validity or execution of a GraphQL document.\nexport { stripIgnoredCharacters } from './stripIgnoredCharacters.js';\n\n// Comparators for types\nexport {\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n} from './typeComparators.js';\n\n// Compares two GraphQLSchemas and detects breaking changes.\nexport {\n  BreakingChangeType,\n  DangerousChangeType,\n  SafeChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n  findSchemaChanges,\n} from './findSchemaChanges.js';\nexport type {\n  BreakingChange,\n  DangerousChange,\n  SafeChange,\n} from './findSchemaChanges.js';\n\n// Wrapper type that contains DocumentNode and types that can be deduced from it.\nexport type { TypedQueryDocumentNode } from './typedQueryDocumentNode.js';\n"]}