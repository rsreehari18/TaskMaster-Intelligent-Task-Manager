{"version":3,"file":"typeFromAST.js","sourceRoot":"","sources":["../../src/utilities/typeFromAST.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,IAAI,EAAE,8BAA6B;AAG5C,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,+BAA8B;AA0BpE,MAAM,UAAU,WAAW,CACzB,MAAqB,EACrB,QAAkB;IAElB,QAAQ,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;YACrD,OAAO,SAAS,IAAI,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC;QACjD,CAAC;QACD,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxB,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;YACrD,OAAO,SAAS,IAAI,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC;QACD,KAAK,IAAI,CAAC,UAAU;YAClB,OAAO,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;AACH,CAAC","sourcesContent":["import type {\n  ListTypeNode,\n  NamedTypeNode,\n  NonNullTypeNode,\n  TypeNode,\n} from '../language/ast.js';\nimport { Kind } from '../language/kinds.js';\n\nimport type { GraphQLNamedType, GraphQLType } from '../type/definition.js';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.js';\nimport type { GraphQLSchema } from '../type/schema.js';\n\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\nexport function typeFromAST(\n  schema: GraphQLSchema,\n  typeNode: NamedTypeNode,\n): GraphQLNamedType | undefined;\nexport function typeFromAST(\n  schema: GraphQLSchema,\n  typeNode: ListTypeNode,\n): GraphQLList<any> | undefined;\nexport function typeFromAST(\n  schema: GraphQLSchema,\n  typeNode: NonNullTypeNode,\n): GraphQLNonNull<any> | undefined;\nexport function typeFromAST(\n  schema: GraphQLSchema,\n  typeNode: TypeNode,\n): GraphQLType | undefined;\nexport function typeFromAST(\n  schema: GraphQLSchema,\n  typeNode: TypeNode,\n): GraphQLType | undefined {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n"]}