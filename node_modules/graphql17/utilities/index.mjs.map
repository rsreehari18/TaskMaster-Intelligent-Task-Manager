{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/utilities/index.ts"],"names":[],"mappings":"AAAA,yEAAyE;AACzE,OAAO,EAAE,qBAAqB,EAAE,oCAAmC;AA2BnE,6CAA6C;AAC7C,OAAO,EAAE,eAAe,EAAE,8BAA6B;AAEvD,oDAAoD;AACpD,OAAO,EAAE,uBAAuB,EAAE,sCAAqC;AAEvE,sDAAsD;AACtD,OAAO,EAAE,iBAAiB,EAAE,gCAA+B;AAE3D,sDAAsD;AACtD,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,6BAA4B;AAGlE,+EAA+E;AAC/E,OAAO,EAAE,YAAY,EAAE,2BAA0B;AAEjD,wBAAwB;AACxB,OAAO,EAAE,uBAAuB,EAAE,sCAAqC;AAEvE,oDAAoD;AACpD,OAAO,EACL,WAAW,EACX,SAAS,EACT,cAAc,EACd,wBAAwB,GACzB,0BAAyB;AAE1B,oDAAoD;AACpD,OAAO,EAAE,WAAW,EAAE,0BAAyB;AAE/C,qEAAqE;AACrE,OAAO;AACL,8EAA8E;AAC9E,YAAY,GACb,2BAA0B;AAE3B,wEAAwE;AACxE,OAAO,EAAE,mBAAmB,EAAE,kCAAiC;AAE/D,yDAAyD;AACzD,OAAO;AACL,mIAAmI;AACnI,YAAY,GACb,2BAA0B;AAE3B,uGAAuG;AACvG,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,uBAAsB;AAE5D,4DAA4D;AAC5D,OAAO,EAAE,gBAAgB,EAAE,+BAA8B;AAEzD,gEAAgE;AAChE,OAAO,EAAE,cAAc,EAAE,6BAA4B;AAErD,OAAO;AACL,sEAAsE;AACtE,gBAAgB;AAChB,2EAA2E;AAC3E,kBAAkB,GACnB,+BAA8B;AAE/B,OAAO;AACL,0EAA0E;AAC1E,kBAAkB;AAClB,+EAA+E;AAC/E,oBAAoB,GACrB,iCAAgC;AAEjC,sCAAsC;AACtC,OAAO,EAAE,SAAS,EAAE,wBAAuB;AAE3C,8CAA8C;AAC9C,OAAO,EAAE,kBAAkB,EAAE,iCAAgC;AAE7D,iGAAiG;AACjG,OAAO,EAAE,sBAAsB,EAAE,qCAAoC;AAErE,wBAAwB;AACxB,OAAO,EACL,WAAW,EACX,eAAe,EACf,cAAc,GACf,8BAA6B;AAE9B,4DAA4D;AAC5D,OAAO,EACL,kBAAkB,EAClB,mBAAmB,EACnB,cAAc,EACd,mBAAmB,EACnB,oBAAoB,EACpB,iBAAiB,GAClB,gCAA+B","sourcesContent":["// Produce the GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery } from './getIntrospectionQuery.js';\n\nexport type {\n  IntrospectionOptions,\n  IntrospectionQuery,\n  IntrospectionSchema,\n  IntrospectionType,\n  IntrospectionInputType,\n  IntrospectionOutputType,\n  IntrospectionScalarType,\n  IntrospectionObjectType,\n  IntrospectionInterfaceType,\n  IntrospectionUnionType,\n  IntrospectionEnumType,\n  IntrospectionInputObjectType,\n  IntrospectionTypeRef,\n  IntrospectionInputTypeRef,\n  IntrospectionOutputTypeRef,\n  IntrospectionNamedTypeRef,\n  IntrospectionListTypeRef,\n  IntrospectionNonNullTypeRef,\n  IntrospectionField,\n  IntrospectionInputValue,\n  IntrospectionEnumValue,\n  IntrospectionDirective,\n} from './getIntrospectionQuery.js';\n\n// Gets the target Operation from a Document.\nexport { getOperationAST } from './getOperationAST.js';\n\n// Convert a GraphQLSchema to an IntrospectionQuery.\nexport { introspectionFromSchema } from './introspectionFromSchema.js';\n\n// Build a GraphQLSchema from an introspection result.\nexport { buildClientSchema } from './buildClientSchema.js';\n\n// Build a GraphQLSchema from GraphQL Schema language.\nexport { buildASTSchema, buildSchema } from './buildASTSchema.js';\nexport type { BuildSchemaOptions } from './buildASTSchema.js';\n\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema.js';\n\n// Sort a GraphQLSchema.\nexport { lexicographicSortSchema } from './lexicographicSortSchema.js';\n\n// Print a GraphQLSchema to GraphQL Schema language.\nexport {\n  printSchema,\n  printType,\n  printDirective,\n  printIntrospectionSchema,\n} from './printSchema.js';\n\n// Create a GraphQLType from a GraphQL language AST.\nexport { typeFromAST } from './typeFromAST.js';\n\n// Create a JavaScript value from a GraphQL language AST with a type.\nexport {\n  /** @deprecated use `coerceInputLiteral()` instead - will be removed in v18 */\n  valueFromAST,\n} from './valueFromAST.js';\n\n// Create a JavaScript value from a GraphQL language AST without a type.\nexport { valueFromASTUntyped } from './valueFromASTUntyped.js';\n\n// Create a GraphQL language AST from a JavaScript value.\nexport {\n  /** @deprecated use `valueToLiteral()` instead with care to operate on external values - `astFromValue()` will be removed in v18 */\n  astFromValue,\n} from './astFromValue.js';\n\n// A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\nexport { TypeInfo, visitWithTypeInfo } from './TypeInfo.js';\n\n// Converts a value to a const value by replacing variables.\nexport { replaceVariables } from './replaceVariables.js';\n\n// Create a GraphQL literal (AST) from a JavaScript input value.\nexport { valueToLiteral } from './valueToLiteral.js';\n\nexport {\n  // Coerces a JavaScript value to a GraphQL type, or returns undefined.\n  coerceInputValue,\n  // Coerces a GraphQL literal (AST) to a GraphQL type, or returns undefined.\n  coerceInputLiteral,\n} from './coerceInputValue.js';\n\nexport {\n  // Validate a JavaScript value with a GraphQL type, collecting all errors.\n  validateInputValue,\n  // Validate a GraphQL literal (AST) with a GraphQL type, collecting all errors.\n  validateInputLiteral,\n} from './validateInputValue.js';\n\n// Concatenates multiple AST together.\nexport { concatAST } from './concatAST.js';\n\n// Separates an AST into an AST per Operation.\nexport { separateOperations } from './separateOperations.js';\n\n// Strips characters that are not significant to the validity or execution of a GraphQL document.\nexport { stripIgnoredCharacters } from './stripIgnoredCharacters.js';\n\n// Comparators for types\nexport {\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n} from './typeComparators.js';\n\n// Compares two GraphQLSchemas and detects breaking changes.\nexport {\n  BreakingChangeType,\n  DangerousChangeType,\n  SafeChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n  findSchemaChanges,\n} from './findSchemaChanges.js';\nexport type {\n  BreakingChange,\n  DangerousChange,\n  SafeChange,\n} from './findSchemaChanges.js';\n\n// Wrapper type that contains DocumentNode and types that can be deduced from it.\nexport type { TypedQueryDocumentNode } from './typedQueryDocumentNode.js';\n"]}