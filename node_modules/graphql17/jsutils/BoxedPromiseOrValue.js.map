{"version":3,"file":"BoxedPromiseOrValue.js","sourceRoot":"","sources":["../../src/jsutils/BoxedPromiseOrValue.ts"],"names":[],"mappings":";;;AAAA,iDAA2C;AAG3C;;;;;;;;;KASK;AACL,MAAa,mBAAmB;IAG9B,YAAY,KAAwB;QAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,IAAA,wBAAS,EAAC,KAAK,CAAC,EAAE,CAAC;YACrB,mEAAmE;YACnE,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACtB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF;AAZD,kDAYC","sourcesContent":["import { isPromise } from './isPromise.js';\nimport type { PromiseOrValue } from './PromiseOrValue.js';\n\n/**\n * A BoxedPromiseOrValue is a container for a value or promise where the value\n * will be updated when the promise resolves.\n *\n * A BoxedPromiseOrValue may only be used with promises whose possible\n * rejection has already been handled, otherwise this will lead to unhandled\n * promise rejections.\n *\n * @internal\n * */\nexport class BoxedPromiseOrValue<T> {\n  value: PromiseOrValue<T>;\n\n  constructor(value: PromiseOrValue<T>) {\n    this.value = value;\n    if (isPromise(value)) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      value.then((resolved) => {\n        this.value = resolved;\n      });\n    }\n  }\n}\n"]}