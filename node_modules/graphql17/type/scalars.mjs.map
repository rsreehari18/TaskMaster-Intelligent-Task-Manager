{"version":3,"file":"scalars.js","sourceRoot":"","sources":["../../src/type/scalars.ts"],"names":[],"mappings":"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","sourcesContent":["import { inspect } from '../jsutils/inspect.js';\nimport { isObjectLike } from '../jsutils/isObjectLike.js';\n\nimport { GraphQLError } from '../error/GraphQLError.js';\n\nimport { Kind } from '../language/kinds.js';\nimport { print } from '../language/printer.js';\n\nimport { defaultScalarValueToLiteral } from '../utilities/valueToLiteral.js';\n\nimport type { GraphQLNamedType } from './definition.js';\nimport { GraphQLScalarType } from './definition.js';\n\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\nexport const GRAPHQL_MAX_INT = 2147483647;\n\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\nexport const GRAPHQL_MIN_INT = -2147483648;\n\nexport const GraphQLInt = new GraphQLScalarType<number>({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  coerceOutputValue(outputValue) {\n    const coercedValue = coerceOutputValueObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n    return num;\n  },\n\n  coerceInputValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n    return inputValue;\n  },\n\n  coerceInputLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        { nodes: valueNode },\n      );\n    }\n    const num = parseInt(valueNode.value, 10);\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        { nodes: valueNode },\n      );\n    }\n    return num;\n  },\n  valueToLiteral(value) {\n    if (\n      typeof value === 'number' &&\n      Number.isInteger(value) &&\n      value <= GRAPHQL_MAX_INT &&\n      value >= GRAPHQL_MIN_INT\n    ) {\n      return { kind: Kind.INT, value: String(value) };\n    }\n  },\n});\n\nexport const GraphQLFloat = new GraphQLScalarType<number>({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  coerceOutputValue(outputValue) {\n    const coercedValue = coerceOutputValueObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n    return num;\n  },\n\n  coerceInputValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n    return inputValue;\n  },\n\n  coerceInputLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        { nodes: valueNode },\n      );\n    }\n    return parseFloat(valueNode.value);\n  },\n  valueToLiteral(value) {\n    const literal = defaultScalarValueToLiteral(value);\n    if (literal.kind === Kind.FLOAT || literal.kind === Kind.INT) {\n      return literal;\n    }\n  },\n});\n\nexport const GraphQLString = new GraphQLScalarType<string>({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  coerceOutputValue(outputValue) {\n    const coercedValue = coerceOutputValueObject(outputValue);\n\n    // Coerces string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  coerceInputValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n    return inputValue;\n  },\n\n  coerceInputLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        { nodes: valueNode },\n      );\n    }\n    return valueNode.value;\n  },\n  valueToLiteral(value) {\n    const literal = defaultScalarValueToLiteral(value);\n    if (literal.kind === Kind.STRING) {\n      return literal;\n    }\n  },\n});\n\nexport const GraphQLBoolean = new GraphQLScalarType<boolean>({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  coerceOutputValue(outputValue) {\n    const coercedValue = coerceOutputValueObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  coerceInputValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n    return inputValue;\n  },\n\n  coerceInputLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        { nodes: valueNode },\n      );\n    }\n    return valueNode.value;\n  },\n  valueToLiteral(value) {\n    const literal = defaultScalarValueToLiteral(value);\n    if (literal.kind === Kind.BOOLEAN) {\n      return literal;\n    }\n  },\n});\n\nexport const GraphQLID = new GraphQLScalarType<string>({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  coerceOutputValue(outputValue) {\n    const coercedValue = coerceOutputValueObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  coerceInputValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  coerceInputLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        { nodes: valueNode },\n      );\n    }\n    return valueNode.value;\n  },\n  valueToLiteral(value) {\n    // ID types can use number values and Int literals.\n    const stringValue = Number.isInteger(value) ? String(value) : value;\n    if (typeof stringValue === 'string') {\n      // Will parse as an IntValue.\n      return /^-?(?:0|[1-9][0-9]*)$/.test(stringValue)\n        ? { kind: Kind.INT, value: stringValue }\n        : { kind: Kind.STRING, value: stringValue, block: false };\n    }\n  },\n});\n\nexport const specifiedScalarTypes: ReadonlyArray<GraphQLScalarType> =\n  Object.freeze([\n    GraphQLString,\n    GraphQLInt,\n    GraphQLFloat,\n    GraphQLBoolean,\n    GraphQLID,\n  ]);\n\nexport function isSpecifiedScalarType(type: GraphQLNamedType): boolean {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n}\n\n// Support coercing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\nfunction coerceOutputValueObject(outputValue: unknown): unknown {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n  return outputValue;\n}\n"]}